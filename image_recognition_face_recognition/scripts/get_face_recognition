#!/usr/bin/env python

from typing import List, Optional

import cv2
from image_recognition_msgs.msg import Recognition
from image_recognition_util import image_writer
from sensor_msgs.msg import RegionOfInterest

from image_recognition_face_recognition.face_recognizer import FaceRecognizer, RecognizedFace


def main(image, db: Optional[str] = None):
    # Read the image
    img = cv2.imread(image)

    # Create openface interface
    face_recognizer = FaceRecognizer()

    if db:
        face_recognizer.restore_trained_faces(db)

    recognized_faces: List[RecognizedFace] = face_recognizer.detect(img)

    recognitions = []
    for fr in recognized_faces:
        recognitions.append(
            Recognition(
                roi=RegionOfInterest(
                    x_offset=fr.roi.x_offset, y_offset=fr.roi.y_offset, width=fr.roi.width, height=fr.roi.height
                )
            )
        )

    annotated_original_image = image_writer.get_annotated_cv_image(img, recognitions)
    cv2.imshow("result", annotated_original_image)
    cv2.waitKey()


if __name__ == "__main__":
    import argparse
    import sys

    parser = argparse.ArgumentParser(description="Get face recognitions")

    # Add arguments
    parser.add_argument("image", type=str, help="Image")
    parser.add_argument("-d", "--db", type=argparse.FileType("rb"), help="Load already trained faces db from file")
    args = parser.parse_args()

    sys.exit(main(**vars(args)))
