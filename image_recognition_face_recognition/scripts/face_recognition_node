#!/usr/bin/env python
from __future__ import annotations

import os
import sys
import traceback
from pathlib import Path

import diagnostic_updater
import rospy
from cv_bridge import CvBridge, CvBridgeError
from image_recognition_msgs.msg import CategoricalDistribution, CategoryProbability, Recognition, Recognitions
from image_recognition_msgs.srv import Annotate, Recognize, AnnotateRequest
from image_recognition_util import image_writer
from sensor_msgs.msg import Image, RegionOfInterest
from std_srvs.srv import Empty, EmptyRequest, EmptyResponse

from image_recognition_face_recognition.face_recognizer import FaceRecognizer


class FaceRecognitionRos:
    def __init__(
        self,
        distance_threshold: float,
        device: str,
        save_images_folder: Path,
        topic_save_images: bool,
        service_save_images: bool,
        topic_publish_result_image: bool,
        service_publish_result_image: bool,
    ):
        """
        FaceRecognitionRos class that wraps the FaceRecognizer in a ROS node

        :param distance_threshold: distance threshold for face recognition
        :param device: device to use for the face recognition
        :param save_images_folder: path where to store the images
        :param topic_save_images: whether to save images originated from image topic callback
        :param service_save_images: whether to save images originated from a service call
        :param topic_publish_result_image: whether to publish images originated from image topic callback
        :param service_publish_result_image: whether to publish images originated from a service call
        """

        # Openface ROS
        self._face_recognizer = FaceRecognizer(device=device, distance_threshold=distance_threshold)
        self._save_images_folder = str(save_images_folder)
        self._topic_save_images = topic_save_images
        self._service_save_images = service_save_images
        self._topic_publish_result_image = topic_publish_result_image
        self._service_publish_result_image = service_publish_result_image

        self._bridge = CvBridge()
        self._annotate_srv = rospy.Service(
            "annotate", Annotate, self._annotate_srv)
        self._recognize_srv = rospy.Service(
            "recognize", Recognize, self._recognize_srv)
        self._clear_srv = rospy.Service("clear", Empty, self._clear_srv)

        self._image_subscriber = rospy.Subscriber(
            "image", Image, self._image_callback)
        self._recognitions_publisher = rospy.Publisher(
            "recognitions", Recognitions, queue_size=10)

        if not self._save_images_folder and (self._topic_save_images or self._service_save_images):
            rospy.logerr(
                "~save_images_folder is not defined but we would like to save images ...")
            rospy.signal_shutdown("")

        if self._topic_publish_result_image or self._service_publish_result_image:
            self._result_image_publisher = rospy.Publisher(
                "result_image", Image, queue_size=10)

        rospy.loginfo("FaceRecognitionRos initialized:")
        rospy.loginfo(" - distance_threshold=%s", distance_threshold)
        rospy.loginfo(" - device=%s", device)
        rospy.loginfo(" - save_images_folder=%s", save_images_folder)
        rospy.loginfo(" - topic_save_images=%s", topic_save_images)
        rospy.loginfo(" - service_save_images=%s", service_save_images)
        rospy.loginfo(" - topic_publish_result_image=%s",
                      topic_publish_result_image)
        rospy.loginfo(" - service_publish_result_image=%s",
                      service_publish_result_image)

    def _annotate_srv(self, req: AnnotateRequest):
        # Convert to opencv image
        """
        Annotate service callback that trains the face of the user

        :param req: Face annotation request
        :return: Empty
        """
        try:
            bgr_image = self._bridge.imgmsg_to_cv2(req.image, "bgr8")
        except CvBridgeError as e:
            raise RuntimeError(f"Could not convert to opencv image: {e}")

        for annotation in req.annotations:
            roi_image = bgr_image[
                annotation.roi.y_offset: annotation.roi.y_offset + annotation.roi.height,
                annotation.roi.x_offset: annotation.roi.x_offset + annotation.roi.width,
            ]

            if self._save_images_folder:
                image_writer.write_annotated(
                    self._save_images_folder, roi_image, annotation.label, True)

            try:
                self._face_recognizer.train(roi_image, annotation.label)
            except Exception as e:
                raise RuntimeError(
                    f"Could not get representation of face image: {e}")

            rospy.loginfo("Succesfully learned face of '%s'" %
                          annotation.label)

    def _clear_srv(self, _: EmptyRequest):
        """
        Service to clear the trained faces
        """
        self._face_recognizer.clear_trained_faces()
        return EmptyResponse()

    def _get_recognitions(self, image_msg: Image, save_images: bool, publish_images: bool):
        # Convert to opencv image
        """
        Recognize service callback

        :param image_msg: The input image
        :return: Recognitions
        """
        try:
            bgr_image = self._bridge.imgmsg_to_cv2(image_msg, "bgr8")
        except CvBridgeError as e:
            raise RuntimeError(f"Could not convert to opencv image: {e}")

        # Write raw image
        if save_images:
            image_writer.write_raw(self._save_images_folder, bgr_image)

        images = []
        labels = []

        # Call facenet neural network in two stages
        face_recognitions = self._face_recognizer.detect(bgr_image)
        # distance, labels_pred = self._face_recognizer.detection_recognition(bgr_image, labels, train=True)

        # Fill recognitions
        recognitions = []

        # rospy.loginfo("Face recognitions: %s", face_recognitions)

        for fr in face_recognitions:
            label = fr.l2_distances[0].label if fr.l2_distances else "face_unknown"

            if save_images:
                roi = fr.roi
                roi_image = bgr_image[
                    roi.y_offset:roi.y_offset + roi.height,
                    roi.x_offset:roi.x_offset + roi.width]
                image_writer.write_annotated(
                    self._save_images_folder, fr.image_np, label, False)
                images.append(roi_image)
                labels.append(label)

            recognitions.append(
                Recognition(
                    categorical_distribution=CategoricalDistribution(
                        unknown_probability=0.0,  # TODO: When is it unknown?
                        probabilities=[
                            # This line needs some changing
                            CategoryProbability(
                                label=l2.label, probability=1.0 / (l2.distance + 0.001))
                            for l2 in fr.l2_distances
                        ],
                    ),
                    roi=RegionOfInterest(
                        x_offset=fr.roi.x_offset,
                        y_offset=fr.roi.y_offset,
                        width=fr.roi.width,
                        height=fr.roi.height,
                    ),
                )
            )
        # returns image with drawn rectangles of the faces and the labels
        annotated_original_image = image_writer.get_annotated_cv_image(
            bgr_image, recognitions)
        if save_images:
            image_writer.write_estimations(
                self._save_images_folder,
                images,
                labels,
                annotated_original_image,
                suffix="_face_recognition",
            )

        if publish_images:
            self._result_image_publisher.publish(
                self._bridge.cv2_to_imgmsg(annotated_original_image, "bgr8"))

        # Service response
        return recognitions

    def _image_callback(self, image_msg):
        # Comment this exception for better debuging
        try:
            recognitions = self._get_recognitions(
                image_msg,
                save_images=self._topic_save_images,
                publish_images=self._topic_publish_result_image,
            )
        except Exception as e:
            rospy.logerr(f"{e}\n" + traceback.format_exc())
            return

        self._recognitions_publisher.publish(Recognitions(
            header=image_msg.header, recognitions=recognitions))

    def _recognize_srv(self, req):
        recognitions = self._get_recognitions(
            req.image,
            save_images=self._service_save_images,
            publish_images=self._service_publish_result_image,
        )

        # Service response
        return {"recognitions": recognitions}

    def restore_trained_faces(self, file_name: Path | str) -> None:
        self._face_recognizer.restore_trained_faces(Path(file_name))


if __name__ == "__main__":
    rospy.init_node("face_recognition")
    try:
        distance_threshold = rospy.get_param("~distance_threshold", 1.0)
        device = rospy.get_param("~device", "cuda:0")
        topic_save_images = rospy.get_param("~topic_save_images", False)
        service_save_images = rospy.get_param("~service_save_images", True)
        topic_publish_result_image = rospy.get_param(
            "~topic_publish_result_image", True)
        service_publish_result_image = rospy.get_param(
            "~service_publish_result_image", True)

        db = rospy.get_param("~db", None)
        if db:
            db = Path(db).expanduser()

        save_images_folder = None
        if topic_save_images or service_save_images:
            save_images_folder = Path(
                rospy.get_param("~save_images_folder",
                                "/tmp/face_recognition_saved_images")
            ).expanduser()
    except KeyError as e:
        rospy.logerr("Parameter %s not found" % e)
        sys.exit(1)

    face_recognition_node = FaceRecognitionRos(
        distance_threshold=distance_threshold,
        device=device,
        save_images_folder=save_images_folder,
        topic_save_images=topic_save_images,
        service_save_images=service_save_images,
        topic_publish_result_image=topic_publish_result_image,
        service_publish_result_image=service_publish_result_image,
    )

    if db:
        rospy.loginfo(f"loading face database from {db}")
        face_recognition_node.restore_trained_faces(db)

    updater = diagnostic_updater.Updater()
    updater.setHardwareID("none")
    updater.add(diagnostic_updater.Heartbeat())
    rospy.Timer(rospy.Duration(1), lambda event: updater.force_update())

    rospy.spin()
