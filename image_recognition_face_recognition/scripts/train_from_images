#!/usr/bin/env python
import os
import cv2
import logging
from argparse import ArgumentParser, Action, ArgumentTypeError, FileType
from image_recognition_openface.face_recognizer import FaceRecognizer


logging.basicConfig()
logger = logging.getLogger(__name__)


def main(modeldir, outfile, align_path, net_path, verbose):
    if verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    face_recognizer = FaceRecognizer(align_path, net_path)

    dirs = [o for o in os.listdir(modeldir) if os.path.isdir(os.path.join(modeldir, o))]
    for cat in dirs:
        logger.info('loading images for %s', cat)
        path = os.path.join(modeldir, cat)

        logger.debug('loading images from %s', path)
        for fname in os.listdir(path):
            f = os.path.join(path, fname)
            logger.debug('processing %s', f)

            img = cv2.imread(f, 1) # load as color

            try:
                logger.debug('training...')
                face_recognizer.train(img, cat)
                logger.debug('success!')
            except Exception:
                logger.exception('face_recognizer failed to process %s', f)

    logger.info('saving database...')
    face_recognizer.save_trained_faces(outfile)
    logger.info('done!')


class ReadableDir(Action):
    def __call__(self,parser, namespace, values, option_string=None):
        prospective_dir=values
        if not os.path.isdir(prospective_dir):
            raise ArgumentTypeError("readable_dir:{0} is not a valid path".format(prospective_dir))
        if os.access(prospective_dir, os.R_OK):
            setattr(namespace,self.dest,prospective_dir)
        else:
            raise ArgumentTypeError("readable_dir:{0} is not a readable dir".format(prospective_dir))


if __name__ == '__main__':
    parser = ArgumentParser(description='Train openface from a database of images')

    parser.add_argument('modeldir', action=ReadableDir, help='Directory with folders for each category')
    parser.add_argument('outfile', type=FileType('w'), help='Where to output the trained faces database')

    parser.add_argument('-k', '--align_path', type=str, help='DLib Align path', required=False,
                        default="~/openface/models/dlib/shape_predictor_68_face_landmarks.dat")
    parser.add_argument('-s', '--net_path', type=str, help='Openface neural network path', required=False,
                        default='~/openface/models/openface/nn4.small2.v1.t7')

    parser.add_argument('-v', '--verbose', action='store_true')

    args = parser.parse_args()
    main(**vars(args))