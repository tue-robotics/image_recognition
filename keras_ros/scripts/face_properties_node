#!/usr/bin/env python
import rospy
from cv_bridge import CvBridge, CvBridgeError

from image_recognition_msgs.srv import GetFaceProperties
from image_recognition_msgs.msg import FaceProperties
from keras_ros.age_gender_estimator import AgeGenderEstimator

import os
import sys
import cv2
import datetime


class WideResnetFaceProperties:
    def __init__(self, weights_file_path, img_size, depth, width, save_images_folder):
        """
        ROS node that wraps the Wide Resnet age gender estimator
        """
        self._bridge = CvBridge()
        self._properties_srv = rospy.Service('get_face_properties', GetFaceProperties, self._get_face_properties_srv)
        self._estimator = AgeGenderEstimator(weights_file_path, img_size, depth, width)

        if save_images_folder:
            self._save_images_folder = os.path.expanduser(save_images_folder)
            if not os.path.exists(self._save_images_folder):
                os.makedirs(self._save_images_folder)
        else:
            self._save_images_folder = None

        rospy.loginfo("WideResnetFaceProperties node initialized")

    def _get_face_properties_srv(self, req):
        """
        Callback when the GetFaceProperties service is called
        :param req: Input images
        :return: properties
        """
        # Convert to opencv images
        try:
            bgr_images = [self._bridge.imgmsg_to_cv2(image, "bgr8") for image in req.face_image_array]
        except CvBridgeError as e:
            raise Exception("Could not convert image to opencv image: %s" % str(e))

        # Store images
        if self._save_images_folder:
            for image in bgr_images:
                filename = "%s/get_face_properties_%s.jpeg" % \
                           (self._save_images_folder, datetime.now().strftime("%Y-%m-%d-%H-%M-%S-%f"))
                rospy.loginfo("Writing image to %s" % filename)
                cv2.imwrite(filename, image)

        # Call the Skybiometry API
        rospy.loginfo("Estimating the age and gender of %d incoming images ...", len(bgr_images))
        estimations = self._estimator.estimate(bgr_images)
        rospy.loginfo("Done")

        face_properties_array = []
        for (age, gender) in estimations:
            face_properties_array.append(FaceProperties(
                age=int(age),
                gender=FaceProperties.FEMALE if gender[0] > 0.5 else FaceProperties.MALE,
            ))

        # Service response
        return {"properties_array": face_properties_array}

if __name__ == '__main__':
    rospy.init_node("face_properties")

    try:
        weights_file_path = rospy.get_param("~weights_file_path")
        img_size = rospy.get_param("~image_size", 64)
        depth = rospy.get_param("~depth", 16)
        width = rospy.get_param("~width", 8)
        save_images = rospy.get_param("~save_images", False)

        save_images_folder = None
        if save_images:
            save_images_folder = rospy.get_param("~save_images_folder", "/tmp/skybiometry")
    except KeyError as e:
        rospy.logerr("Parameter %s not found" % e)
        sys.exit(1)

    WideResnetFaceProperties(weights_file_path, img_size, depth, width, save_images_folder)
    rospy.spin()
