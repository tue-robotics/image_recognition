#!/usr/bin/env python3
import os
import sys

import diagnostic_updater
import rospy
from cv_bridge import CvBridge, CvBridgeError
from image_recognition_age_gender.age_gender_estimator import AgeGenderEstimator
from image_recognition_msgs.msg import FaceProperties
from image_recognition_msgs.srv import GetFaceProperties
from image_recognition_util import image_writer


class FacePropertiesNode:
    def __init__(self, weights_file_path, img_size, save_images_folder, use_gpu):
        """
        ROS node that wraps the PyTorch age gender estimator
        """
        self._bridge = CvBridge()
        self._properties_srv = rospy.Service('get_face_properties', GetFaceProperties, self._get_face_properties_srv)
        self._estimator = AgeGenderEstimator(weights_file_path, img_size, use_gpu)

        if save_images_folder:
            self._save_images_folder = os.path.expanduser(save_images_folder)
            if not os.path.exists(self._save_images_folder):
                os.makedirs(self._save_images_folder)
        else:
            self._save_images_folder = None

        rospy.loginfo("PytorchFaceProperties node initialized:")
        rospy.loginfo(" - weights_file_path=%s", weights_file_path)
        rospy.loginfo(" - img_size=%s", img_size)
        rospy.loginfo(" - save_images_folder=%s", save_images_folder)
        rospy.loginfo(" - use_gpu=%s", use_gpu)

    def _get_face_properties_srv(self, req):
        """
        Callback when the GetFaceProperties service is called

        :param req: Input images
        :return: properties
        """
        # Convert to opencv images
        try:
            bgr_images = [self._bridge.imgmsg_to_cv2(image, "bgr8") for image in req.face_image_array]
        except CvBridgeError as e:
            raise Exception("Could not convert image to opencv image: %s" % str(e))

        rospy.loginfo("Estimating the age and gender of %d incoming images ...", len(bgr_images))
        estimations = self._estimator.estimate(bgr_images)
        rospy.loginfo("Done")

        face_properties_array = []
        for (age, gender_prob) in estimations:
            gender, gender_confidence = (FaceProperties.FEMALE, gender_prob[0]) if gender_prob[0] > 0.5 else (FaceProperties.MALE, gender_prob[1])

            face_properties_array.append(FaceProperties(
                age=int(age),
                gender=gender,
                gender_confidence=gender_confidence
            ))

        # Store images if specified
        if self._save_images_folder:
            def _get_label(p):
                return "age_%d_gender_%s" % (p.age, "male" if p.gender == FaceProperties.MALE else "female")

            image_writer.write_estimations(self._save_images_folder, bgr_images,
                                           [_get_label(p) for p in face_properties_array],
                                           suffix="_face_properties")

        # Service response
        return {"properties_array": face_properties_array}


if __name__ == '__main__':
    rospy.init_node("face_properties")

    try:
        default_weights_path = os.path.expanduser('~/data/pytorch_models/best-epoch47-0.9314.onnx')
        weights_file_path = rospy.get_param("~weights_file_path", default_weights_path)
        img_size = rospy.get_param("~image_size", 64)
        save_images = rospy.get_param("~save_images", True)
        use_gpu = rospy.get_param("~use_gpu", False)

        save_images_folder = None
        if save_images:
            save_images_folder = rospy.get_param("~save_images_folder", "/tmp/image_recognition_pytorch")
    except KeyError as e:
        rospy.logerr("Parameter %s not found" % e)
        sys.exit(1)

    try:
        FacePropertiesNode(weights_file_path, img_size, save_images_folder, use_gpu)
        updater = diagnostic_updater.Updater()
        updater.setHardwareID("none")
        updater.add(diagnostic_updater.Heartbeat())
        rospy.Timer(rospy.Duration(1), lambda event: updater.force_update())
        rospy.spin()
    except Exception as e:
        rospy.logfatal(e)
